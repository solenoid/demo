import Link from 'next/link'

const realInput = `.##..##
###..##
#..##..
#..##..
##....#
.##..##
##.##.#
###..##
.##..##
..#..#.
.#.##.#

#...#..##.#..##..
..###.#.##..#..##
.....#...#####.##
.....#...#####.##
..###.#.##..#..##
#...#..##.#..##..
.##.#.###.###..##
.###.#.#..#.#.#.#
##...#.#.....#.#.
.#...#..##.##..#.
######.#..#..##.#
#######.##.....#.
####.##.##.....#.

####.##.#######
.####..####....
####.##.#######
.###.##.###.##.
.##..##..##....
.#...##...#.##.
#..######..####
#..#....#..####
.###.##.###.##.
#.#..##.##.####
#.#.#..#.#.#..#
####....#######
.##......##.##.

#..#.###..###.#
.###..#....#..#
.###.#..##..#.#
..###........##
.###.#.#..#.#.#
.....##....##..
##..#.#.##.#.#.
##..#.#.##.#.#.
.#...##....##..
.###.#.#..#.#.#
..###........##

.##.#.#
###..##
#..#.#.
#..#...
#..#...
#.##.#.
###..##
.##.#.#
.##.#.#
###..##
#.##.#.
#..#...
#..#...
#..#.#.
###..##
.##.#.#
....#..

#.#..##
#.#.#.#
...##..
#..###.
.#..##.
.#####.
.#####.
.#..##.
#..###.
...##..
#.#.#.#
#.##.##
#.##.##

....###....###.
#..############
#..#.##....##.#
######..##..###
.##..##.##.##..
....#.#.##.#.#.
.##..##.##.##..
.##.###....####
.##...######...
#..#..#....#..#
.##....#..#....
.##.#........#.
.##.##.#..#.##.
.##..##.##.##..
#..###..##..###

########.##..#.
##....##....##.
.#.##.#..##..##
...........#..#
#######.#.###..
#.####.###....#
##....###....##
...##....#.#...
##....##.######
##....##.######
...##....#.#...
##....###....##
#.####.###....#

#.###.#..
#.###.#..
..##.#.##
#.####.#.
#####...#
#.##.##..
..##.#...
##...###.
.#....#.#
#..#...##
#..#.#.##

.#######..###
...##...##...
###..#####...
###..#####...
...##...##...
.#######..###
.#....#.##.#.

.###.##..##.###..
...#...##...#....
..#.#.####.#.#...
.#...#...##...#.#
.....#....#.....#
#.##.##..##.##.#.
...#.######.#...#
#.#..#.##.#..#.#.
....##....##....#
#######..########
##.#..####..#.##.
#..#..#..#..#..##
#..#..#..#..#..##

.#.##....##
....#....#.
.#.#.####.#
.####....##
###........
#.#..####..
#.##.####..
##.#......#
...#.####.#
...#.####.#
##.#......#
#.##.####..
#.#..####..

###.#...###
...#..##.#.
.##.#..##.#
.##.###....
..#.##..#..
#..#.#.#.##
.#.#..#..##
...#..#..##
#..#.#.#.##
..#.##..#..
.##.###....
.##.#..##.#
...#..##.#.
###.#...###
###.#...###

.##.##.
.#.#..#
.#.####
##..##.
#.#....
...#..#
.######
...#..#
#...##.
.#.####
.#.####
#.#.##.
...#..#

.......###..#.#.#
#.##.#......###.#
.####.##.#.#.##.#
.####.##..####..#
#.##.##......###.
......##..#......
.####.#.....#....
##..###.#.#...###
##..##..#.#...###

..##.##.##.
#..#.#.####
.#.#...####
.#..#.##..#
..#####....
#.####.....
##.##...##.
##.##...##.
#.####.....
..#####....
.#..#.##..#
##.#...####
#..#.#.####
..##.##.##.
#..#.###..#
###.###.##.
####.##....

#.#.###
##.....
.#..##.
.###..#
.###..#
.#..##.
##.....
#.#.###
###.###

##..#...#.###
.#.##.#...###
##.#..###..##
..........###
.#.###.....##
#...#.#.#..##
#.##.#####...
.#.##..###...
...##..##.###
##...........
#####..####..
#####..####..
#............

###.###
....###
.##..##
...####
##.####
#...#..
###.#..
..###..
...#.##
.#.#.##
..###..

#.######.##
...####....
...#..#....
.#..##..#..
##.#..#.###
#.#....#.##
#.#......##
####..#####
#.#....#.##
.#.####.#..
#.##..##.##
##..##..###
.##.##.##..

..###..###...##
...#....#....##
.#........#.###
..#.#..#.#..###
#...#..#...##..
###.#..#.###.##
##############.
#.#.#..#.#.#.##
..##.##.##.....

##....###...###
.##..##.##..###
##....##...####
##.##.###.#....
#..##..##.##.#.
.#....#.###.##.
##....###...###
##....###...###
.#....#.###.##.
#..##..#####.#.
##.##.###.#....
##....##...####
.##..##.##..###
##....###...###
..####..#...###
.######.#.##.##
.##..##...####.

.#.#...
.#.#...
#.#..##
.####..
...###.
#..##..
##.#.#.
....#.#
....#.#
##.#.#.
##.##..
...###.
.####..

..##....##.
###.#..####
##........#
####.##.###
...#....#..
####.##.###
##.######.#

..#......#....#..
.#.#....#.#..#.#.
..#.#..#.#....#.#
##.#.##.#.####.#.
...##..#........#
.#..####..#..#..#
.#.#.##.#.#..#.#.

.#.#..#...#..
##...#####.#.
...#...##.#..
..##.#.#..##.
##...#..####.
####.##.#..#.
...#.#.####..
..##.#..#..#.
#######...#.#
####..#...###
####.######.#
##..##...##.#
....#..#.##.#
....#..#.##.#
##..##...##.#
####.######.#
####..#...###

##..##.#.##.#.#
..###..######..
..#...#..##..#.
####.##.####.##
###.#..#.##.#..
..###....##....
###.#....##....
.....##########
###..###....###
####.###.##.###
..#####.#..####
##.#####.##.###
##.#..########.

##.####
###.#.#
...####
######.
#####..
###....
###...#
..###..
##..###
..###.#
####.#.
......#
......#
####.#.
..###.#
##.####
..###..

....#.##..##.#.
####..#....#..#
#..#....##....#
......#.##.#...
.##.#........#.
.##...##..##...
#..###.#..#.###
#..###..##..#.#
#..###......###
#..#.#.####.#.#
.......####....
....##......##.
.##..#.#..#.#..
#..#.#.####.#.#
.....##....##..

.#......#.####..#
#..####..#..##..#
.#.####.#..#..#..
#...##...#.#.####
##########.......
#..####..#....##.
.##.##.##.#.#.##.
#........#....##.
..#.##.#....#.##.

###.##.#....#.##.
..####.##..##.###
###..#..####..#..
..#..............
###...##....##...
..#.###..##..###.
...#.#...##...#.#
##...#.#....#.#..
###.##..####..##.
...##.#......#.##
...#.#...#....#.#
####.....##.....#
###...##.##.##...
####.####..####.#
....#####..#####.

#.##.#..#
##...#.##
##....##.
....##...
....###..
##....##.
##...#.##
#.##.#..#
#.##.#..#

.##.#......#.
#####.####.##
#..#...##...#
.##.###.####.
....#..##..#.
#.##..####..#
....###..###.
#....######..
##....#..#...
#.##.#....#.#
...#...##...#
..#.########.
..#.########.
...#...##...#
#.##.#....#.#

.#.#.#..#....
.#.#.#..#....
#.#.###.#....
#......###..#
...##..#.#..#
.##..###.#.##
.#.#.##.#.###
##..##..#.#.#
..#..######.#
#..#.####.#..
..######.#.##
..######.#.##
#..#.#.##.#..

##.###.....#.
##.#..####...
##...###.##.#
###..###..#.#
...##...#..##
...##...#..##
###..###.##.#
##...###.##.#
##.#..####...
##.###.....#.
##...#.##.#.#
..###..#.#...
##.###...#..#

..#.##....##.#...
###..######..####
..#.###..###.#...
....##.##.##.....
.###..#..#..###..
..#####..######..
######....#######
##.###....###.###
#.#.#.#..#.#.#.##
###.#.####.#.####
.##.#..##..#.##..

.#..##..##.
..#.#....#.
.....####..
#..###..###
###..#.##..
####.#..#.#
####.#..#.#

#.##.##
..##.##
..##.##
#.##.##
.#....#
#.#....
##.##.#
..###..
...###.

####.#..#.#
....######.
......##...
.##.######.
......##...
.##.#.##.#.
.##........
....######.
.##.....#..

##....###
#...#####
#.###...#
.#..#..##
....####.
...##.##.
##...#.#.
##...#.#.
...##.##.
....####.
.#..#..##
#.###...#
#...#####
##.#..###
##.#..###

#.##..##.#.#.####
..........##.....
..######..####..#
..######....#.##.
#.##..##.##.##.##
..##..##...#.....
#.##..##.###.....
###....###...#..#
#........###..##.
#...##...##.#####
....##......#####
..##..##..#..#..#
#.#.##.#.#####..#

##.##.##...###.
#.####.##..###.
..####..#......
##.##.##.#..#..
..####...#...##
........#.#.#.#
..#..#..#...##.
##.##.###..##.#
##.##.###...###
###..###.#...##
..#..#...##..#.

#...#..#....#..
.#..###..##..##
##..#..##..##..
.##.#####..####
.#..#..#....#..
.#.###..#..#..#
.###.##########
.#......#..#...
#####..#....#..
.#.#...#.##.#..
.######..##..##
#.#..##.#..#.##
........####...

##.#.#.##
....#....
######...
##.##.##.
###....#.
....##.##
##.#.....
....#..##
...######
....#####
....#..##

#.#.#.#.###.#....
##..###..##.#....
.#.#.##.###.#####
..###....###.##..
#..#.#.##..######
#.#.###..###.....
.####...######...
##..#.#.#..#.#.##
#.####.##...#.###
#.##.#.##.###..##
.##...#.##.....##
.....###.#.###...
.#.##..#....#..##
.#.##..#.#..#..##
.....###.#.###...

###...#..##
..#.#...###
#.#.##.....
...#...####
##.#...#.##
......#..##
#..#.##....
...###..#..
..#.##.##..
..#.##.##..
.#.###..#..
#..#.##....
......#..##

##.####
#..##..
..##..#
#..#...
....#.#
##.##..
#.##..#
#.#.#..
#.#.#..
#.##..#
#..##..
....#.#
#..#...
..##..#
#..##..
##.####
##.####

#.##.#####.####.#
.#..####.#......#
#..###.##...##...
.##.....####..###
##..###..########
#.##.#....#.##.#.
#.##.#....#.##.#.
##..###..########
.##.....####..###
#..###.##...##...
.#..###..#......#

.###..#.##.#.#.
#...####...##.#
...#.####..#.##
#..###...#####.
#..###...#####.
...#.####..#.##
#...####...##.#
.###..####.#.#.
#.#..#.####..##
#..#####..#..##
#..#####..#..##

#.#....#####..#
..###..##...##.
..#.###.##.....
...##...#...##.
...##...#...##.
..#.###.##.....
..###..##...##.
#.#....#####..#
.#.#......#.#..
#....##....#..#
##.#.#.#####..#

.#..###..#...#.##
###.##.#.#....#..
###.##.###....#..
.#..###..#...#.##
##..#..#.#.##....
#....#....###.#..
....#.##..###..##
.#.###.#..#..#...
.#..##.##.#.#..##

...##...#..
##.##.####.
##....##..#
..#..#.....
#.#..###...
#..##..#..#
.######..#.
##....##..#
...##.....#
...##.....#
##....##..#

#....#......#..
#.##.########.#
##..##########.
##..##.#..#.##.
.####..####..#.
#.##.#.#..#.#.#
#######.##.####
######......###
.####.#.##.#.##
.......####....
##..####..####.
.#..#.#.##.#.#.
.####.#....#.##

########...##..
#......###....#
###..##########
#########..##..
#..##..#...##..
........#..##..
.#....#.##.##.#
.#....#.##.##.#
.#....#........
...##......##..
..#..#...#.##.#
.#....#.#..##..
#.####.###.##.#
###..###..####.
##.######..##..

..##.....####..
..#.#.#..#..#..
..###.######.##
###..#.##....##
....####..##..#
##.###.########
..########..###
...#..###....##
....###.#.##.#.
##....####..###
##.#..###.##.##

.####.#.####..#..
.#.....#..#######
######.###..#..##
.##.....#..#.#.##
##...#..#.####.##
..##...#.####.###
#.#..####...###..
#.#.##..#.#...#..
..##..#.#..#.#...
#..##..#....##...
.##.....##.#.#.##
.###..###....#.##
.###..####...#.##

..#..####..#.
##.#.#..#.#..
...#..##..#..
##.#......#.#
###.##..##.##
...########..
..##..##..##.
##.###..###.#
..##..##..##.

.##..#..#.#..##..
.#.##....##.#..#.
..###......##..##
##..######.......
.#######.........
####...#..#######
...###..##...##..
....#.#...##....#
.#.##..#.####..##
##...###.##..##..
##...###.##..##..
.####..#.####..##
....#.#...##....#

#..##.####.
#..##.####.
#...#.####.
#####..##..
.#..##.##.#
...#..#..#.
.......##..
.##.#......
#...#......
##.#..#..#.
##...#....#
...########
#.##..#..#.
###..#.##.#
.....######
#..#....#..
#.#.##.##.#

##..#.#....
.####..#.##
.#.#.#..#.#
.#.#.#..#.#
.####..#.##
##..#.#....
#####......
.###..##.##
##..##.###.
#..#....#..
##.#####.##
.###...###.
..##...###.
##.#####.##
#..#....#..

..###....###.
####......###
...#..##..#..
....##..##...
..####..####.
...#..##..#..
..#.#....#.#.
###..#..#..##
..#.####.#.#.
##..#....#..#
#####.##.####
....##..##...
##...####...#
###..#..#..##
..#...##...#.

##.#...##.##..#
.#..##.##.#.##.
###.#..###.....
###.#..###.....
.#..##.##.#.##.
#..#...##.##..#
##.#####.#..##.
#.#.##..#.#....
#.#....####....
.######.#...##.
...#.##.#..####
..##....###.##.
..#..##.#######
.#..##...#.#..#
#..###.........
.##..#.#.###..#
######.##.##..#

##.###..##.######
##.##...#..##..##
#..#.....##.####.
..#.#...#.##....#
##..##.##.###..##
######..#########
.#..##....#.####.
.#....###..##..##
.....##.....#..#.
#....#....#..##..
#..#...#.........
#..#...##.###..##
#..#.#.##.###..##

..####.
##....#
##....#
..####.
#.#..#.
.#.##.#
...##..
##.##.#
#..##..
#.####.
#......
##....#
.######
..#####
##....#
###..##
#.####.

...#..##..#...###
.#..#....#..#...#
##.########.##.##
#...######...#...
##.#..##..#.##...
..#.######.#...##
####.##.#.######.
##....##....###..
##.########.##.#.
#.#.##..##.#.#.##
..#.#....#.#.....
.....####.....##.
#.#.##..##.#.###.
.#.#.#..#.#.#.##.
.#.#.#..#.#.#.##.

##....#
#.#..#.
.#.##.#
.#.##.#
..#..#.
##....#
.######

#.###..##.##.
#....#.#.....
###..#.####..
#.....#.#.###
#...#..#.#...
#.#..##....##
####.#..#....
.###.#.#.....
.###.#.#.....
####.#..#....
#.#..##....##
#...#..#.#...
#.....#.#.###
###..#.####..
#....#.#.....

..#....####..
..##...####..
#.#.##.#..#.#
#..#..#..#.#.
###.....##...
...###.####.#
##.#.#..##..#
##.#.#..##..#
...###.####.#
###.....##...
#..#..#..#.#.

.##..#.#..#..#.
#..#..##.#....#
.##...#..#.##.#
#.####.#.##..##
....#.#..#.##.#
#######.#......
....#...#.####.
....##.#.......
.......##.#..#.
####.#....#..#.
#####..#.######
####.#..#......
.##.#..#..#..#.
#..#####..####.
.##.....#......
.##.###...#..#.
....##.#...##..

##.#..#
.##....
..##..#
.#.####
##.#..#
.##....
.######
#.#.##.
###....
.##....
.##....
###....
#.#.##.
.######
.##....
#..#..#
.#.####

##......###..###.
..#....#...##...#
#.#.##.#.#....#.#
#........######..
.##....##.####.##
.#.####.#..##..#.
##..##..##....###
..........####...
...####....##....

##...##.##.##...#
###..##.##.##..##
#####.##..##.####
##.##........##.#
###.####..####.##
...##.#....#.##..
...#..######..#..
####.#..##..#.###
..##..#.##.#..###

..###.##.
.#####..#
....#####
##.#..###
#.##..##.
##.###.#.
.#..##...
.#..##...
##.###.#.
#.##..##.
##.#..###
....#####
.#####..#
..###.##.
..###.##.
.#####...
....#####

........#
#.####.##
.#....#.#
........#
...##....
...##....
........#
.#....#.#
#.####.#.
........#
..#..#...
#......##
.#....#.#
#.#..#.##
...##....

...#.##..
##.###...
#...#####
###...###
##...#...
###.#.###
.####.#..
###......
.##..#...
.##..#...
###......
.####....
###.#.###
##...#...
###...###
#...#####
##.###...

#..#....#..##.##.
#..######..##.##.
#...#..#...#.....
.#..#..#..#.##..#
.####..####.##..#
#.#.####...######
..########....##.
..#.#..#.#..#....
##..####..###.##.

.####.###
#....#...
#.##.#...
..##..###
######.#.
##..##.##
#.##.####
.####.#..
#....####
######...
..##.....

......#..#...
.##...####.##
.....#.#..###
####.#.###.#.
#..####..#.##
.##.#..#.....
##.#.###..###
.....#...##.#
#..#.##.###.#
#..###.#..#..
#..##.#.####.
####.#..#..#.
.##..#...###.
....##.##...#
.##....##..#.
....#.##.....
....#.##.....

##..##.
##..##.
.#..#..
#....#.
.####.#
#....#.
..###..

###.....#
###.....#
.##.#..##
#..#.#.##
####..#..
.##..##..
##...###.
..#.###.#
..#.###.#
##..####.
.##..##..
####..#..
#..#.#.##

#.#....#.#.......
#...#.....##.##..
#...#.....##.##..
#.#....#.#.......
#######..#.......
.#######.##..##..
.#.##.####.##..##
#####...##.......
##.####...##....#

#.#.#####
.....#...
#..###..#
#####.##.
.###.#..#
...##.##.
.##..####
#..#.....
.###.#..#
....#.##.
##...#..#
#..######
#..######

.#####.#..#.#####
#..#...####..##..
.###.#.####.#.###
..#..########..#.
##..###....###..#
##..###....###..#
..#..########..#.

...#....##.#.#.
#....#.....#.#.
###.##..##..#.#
##.#######.##..
###..#.#..####.
..###.###...#..
#.##.....#.####
#.##.....#.####
..###.###......
###..#.#..####.
##.#######.##..
###.##..##..#.#
#....#.....#.#.
...#....##.#.#.
.##..##.....##.
#####...####...
#####...####...

#.###..######
####..####...
.#.###.##..##
.......#..#..
###.#...##.##
#....##..####
.#.....###.##
#....#..#....
#....##.#....

..#.##.....
.####.####.
.#.#.#.###.
..###.###.#
..###.###.#
.###.#.###.
.####.####.
..#.##.....
##..##..###
#.#........
####..####.
####..####.
#.#........

......#..
######...
.#..#..##
#....####
.#####.##
#.##.##..
#....##..
.#..#....
..##..###
.#..#..##
#....#.##
#######..
..##...##

..#..#..#..
...##....##
####.####.#
..###....##
##..#.####.
##..##..##.
###.#....#.
##...####..
####..##..#
##.###..###
..#..####..

##.###....##.#..#
##.###....##.#..#
#.....###..##....
.#####.#..#.####.
#..#.#...#....#.#
##.#.#...#....#.#
.#####.#..#.####.

.##..##.###
.##..##.###
#..##..#.##
#..##..####
###..####..
.##..##.###
........#..
...##......
#.#..#.#..#
#.####.###.
#..##..#...
#.#..#..##.
##########.

##..######.#..#
...#.#.#.#...#.
##..##.#.#.#.##
.....###..##.#.
.....###..##.#.
##..##.#.#.#.##
...#.#.#.#...#.
##..######.#..#
##.#.##...###.#
.#.##.####.####
###.#.#.......#

.###.##
##..###
##.#...
#......
##.....
#...###
#...###
##.....
#......
##.#...
##..###
.###.##
.#.###.
.##..##
...##..
..#..##
...##..

.######
.######
.....##
###.#.#
#.####.
#...#..
#.##...
#.##..#
..##.##
...#.#.
...#.#.
..##.##
####..#

......#
......#
####.#.
.#.##.#
..##...
#.##..#
.##.###
.##..##
#.##..#

..##.##..##..
###..########
#.#####..##..
#.#####..##..
###..########
..##.##..##..
#..###.......
...#..#.#####
###........##
.#.#.#.#....#
......#..#.##

..##....#......##
..##....#......##
###.####..###.###
#.##.##.###.#.##.
......##.####...#
#.##.###...######
.####.###.#...###

###...##...####
.##...##...##.#
.#....##....#..
....######.....
.####.##.####.#
..####..####..#
..####..####...

######..#####
#...######...
#..#.####.#..
.###......###
.##.#.##.#.##
...#.####.#..
#.#.##..##.#.
#.#.##..##.#.
...#.####.#..
.##.#.##.#.##
.###......###
#..#.####.#..
#...######...
######..#####
#..####.###..
...##.##.##..
##...####...#

.##.###..#.......
..##.#..#...#..#.
####.......##..##
.##......#.##..##
..#.####.........
..#.####.........
###......#.##..##
####.......##..##
..##.#..#...#..#.
.##.###..#.......
...##...#....##..
#.##.#...####..##
##..#.##..#.#..#.
...#####..#.####.
..##..#.##.......
##.######..#.##.#
.##.##...##......

##.#........##.##
...#...#...#...##
...#...#...#...##
####........##.##
#####.#.##......#
#####.####.#..#.#
##.#..##.##..###.
##..#.....#####..
##..##...#.#.#...
....#.#.#....##.#
####.###...#....#
##.####....###.##
..##..#.#.#......`

const sampleInputPart1 = `#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#`

const sumIt = (prev: number, item: number) => prev + item

const useTestInput = false
const input = useTestInput ? sampleInputPart1 : realInput

const makeNum = (a: string) =>
  Number.parseInt(a.replaceAll('.', '0').replaceAll('#', '1'), 2)

const matchExact = (a: string, b: string) => a === b
const matchSmudge = (a: string, b: string) => {
  const aNum = makeNum(a)
  const bNum = makeNum(b)
  const n = aNum ^ bNum
  // const len = a.length
  // console.log('===')
  // console.log(a)
  // console.log(aNum.toString(2).padStart(len, '0'))
  // console.log(b)
  // console.log(bNum.toString(2).padStart(len, '0'))
  // console.log(n.toString(2).padStart(len, '0'))
  return n && !(n & (n - 1))
}

const findReflection = (
  rows: string[],
  potentials: number[],
  requiredSmudges: number
): null | number => {
  // console.log(potentials)
  for (let i = 0; i < potentials.length; i++) {
    const start = potentials[i]
    let misses = 0
    let smudges = 0
    for (let j = 1; j + start < rows.length && start - j > 0; j++) {
      const a = rows[start - 1 - j]
      const b = rows[start + j]
      if (!matchExact(a, b)) {
        misses++
      }
      if (matchSmudge(a, b)) {
        smudges++
      }
    }
    if (misses === requiredSmudges && smudges === requiredSmudges) return start
  }
  return null
}

const part1 = input
  .split('\n\n')
  .map((mirror, m) => {
    // console.log(`mirror ${m + 1}`)
    // console.log(mirror)
    const rows = mirror.split('\n')
    let exactMatchRows: number[] = []
    for (let i = 1; i < rows.length; i++) {
      if (matchExact(rows[i], rows[i - 1])) {
        exactMatchRows.push(i)
      }
    }
    const rowMirrorOnExact = findReflection(rows, exactMatchRows, 0)
    const rowMirrorOn = rowMirrorOnExact ?? null
    if (rowMirrorOn != null) {
      // console.log(`row match on mirror ${m + 1} on row ${rowMirrorOn}`)
      return 100 * rowMirrorOn
    }
    let cols = []
    for (let i = 0; i < rows[0].length; i++) {
      cols.push(rows.map((row) => row[i]).join(''))
    }
    let exactMatchCols: number[] = []
    for (let i = 1; i < cols.length; i++) {
      if (matchExact(cols[i], cols[i - 1])) {
        exactMatchCols.push(i)
      }
    }
    const colMirrorOnExact = findReflection(cols, exactMatchCols, 0)
    const colMirrorOn = colMirrorOnExact ?? null
    // console.log(`col match on mirror ${m + 1} on col ${colMirrorOn}`)
    return colMirrorOn as number
  })
  .reduce(sumIt, 0)
console.log(part1)

const part2 = input
  .split('\n\n')
  .map((mirror, m) => {
    // console.log(`mirror ${m + 1}`)
    // console.log(mirror)
    const rows = mirror.split('\n')
    let exactMatchRows: number[] = []
    let smudgeMatchRows: number[] = []
    for (let i = 1; i < rows.length; i++) {
      if (matchExact(rows[i], rows[i - 1])) {
        exactMatchRows.push(i)
      }
      if (matchSmudge(rows[i], rows[i - 1])) {
        smudgeMatchRows.push(i)
      }
    }
    const rowMirrorOnExact = findReflection(rows, exactMatchRows, 1)
    const rowMirrorOnSmudge = findReflection(rows, smudgeMatchRows, 0)
    const rowMirrorOn = rowMirrorOnExact ?? rowMirrorOnSmudge ?? null
    if (rowMirrorOn != null) {
      // console.log(`row match on mirror ${m + 1} on row ${rowMirrorOn}`)
      return 100 * rowMirrorOn
    }
    let cols = []
    for (let i = 0; i < rows[0].length; i++) {
      cols.push(rows.map((row) => row[i]).join(''))
    }
    let exactMatchCols: number[] = []
    let smudgeMatchCols: number[] = []
    for (let i = 1; i < cols.length; i++) {
      if (matchExact(cols[i], cols[i - 1])) {
        exactMatchCols.push(i)
      }
      if (matchSmudge(cols[i], cols[i - 1])) {
        smudgeMatchCols.push(i)
      }
    }
    const colMirrorOnExact = findReflection(cols, exactMatchCols, 1)
    const colMirrorOnSmudge = findReflection(cols, smudgeMatchCols, 0)
    const colMirrorOn = colMirrorOnExact ?? colMirrorOnSmudge ?? null
    // console.log(`col match on mirror ${m + 1} on col ${colMirrorOn}`)
    return colMirrorOn as number
  })
  .reduce(sumIt, 0)
console.log(part2)

const CoDeO = () => {
  return (
    <main>
      <h2>Day 13</h2>
      <p>Part 1: calculated is {part1}, and answer is 30575.</p>
      <p>Part 2: calculated is {part2}, and answer is 37478.</p>
      <p>
        <Link href="/advent-of-code-2023">Back to Advent</Link>
      </p>
    </main>
  )
}

export default CoDeO
